apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.treelogic-swe'
version = '1.0.1'
ext.packaging = 'jar'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

allprojects {
    repositories {
        mavenCentral()
    }
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'log4j:log4j:1.2.17'
    compile 'org.freemarker:freemarker:2.3.20'
    compile 'com.treelogic-swe:cxf-stub:1.0.1'
    
    testCompile "junit:junit:4.9"
    testCompile "com.amazonaws:aws-java-sdk:1.5.3"
}

eclipse {
    classpath {
        containers.clear()
        containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6')
        containers.add('org.eclipse.jst.j2ee.internal.web.container')
    }
}

/**/
sourceSets {
    examples {
        java {
            srcDir 'example/java/simple'
            srcDir 'example/java/full/client-usage'
            srcDir 'example/java/full/extending-aws-mock/java'
            srcDir 'example/java/test'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}
/**/

task checkstylejs (type: Checkstyle) {
    source 'example/nodejs'
    include '**/*.js'
    classpath=files()
}

task sourcesJar(type:Jar, dependsOn: classes){
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude "**/log4j.properties"
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

jettyRun.daemon = false
jettyRun.httpPort = 8000                // Port for test
[jettyRun,jettyStop]*.stopPort = 8091   // Port for stop signal
[jettyRun,jettyStop]*.stopKey = 'foobar'

task run(dependsOn: jettyRun) {

}

//test.doFirst {
//    println '---- starting aws-mock on jetty before tests start ----'
//    jettyRun.daemon = true
//    tasks.jettyRun.execute()
//}

test {
    testLogging.showStandardStreams = true
}

task testExamples(type: Test) {
    testClassesDir = sourceSets.examples.output.classesDir
    classpath = sourceSets.examples.runtimeClasspath + sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    testLogging.showStandardStreams = true
}

//testExamples.doFirst {
//    println '---- starting aws-mock on jetty before testExamples start ----'
//    jettyRun.daemon = true
//    tasks.jettyRun.execute()
//}

// this is one working way to finally run jettyStop after test despite of success or failure
//gradle.taskGraph.afterTask { Task task, TaskState state ->
//    if(task == test || task == testExamples) {
//        tasks.jettyStop.execute()
//        println '---- stopped jetty after tests ended ----'
//    }
//}

jar {
    exclude('log4j.properties')
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// We comment the signing task for avoiding travis-ci build failure 
// because we don't commit secret key for signing jars to github.com.
//signing {
//    sign configurations.archives
//}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)  }
 
            // for publishing to local folder - for normal travis-ci builds
            repository(url: "file:/tmp/tlswe/repo")

            // for publishing to public maven repo - for manually releasing to maven repo
            //repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            //  authentication(userName: sonatypeUsername, password: sonatypePassword)
            //}

            addFilter('upload_jars') {artifact, file ->
                 artifact.type != 'war'
            }
 
            pom('upload_jars').project {
               name 'aws-mock'
               packaging 'jar'
               description 'A lightweight, language-agnostic mock of essential AWS services, for test automation.'
               url 'https://github.com/treelogic-swe/aws-mock'
 
               scm {
                   url 'scm:git@github.com:treelogic-swe/aws-mock.git'
                   connection 'scm:git@github.com:treelogic-swe/aws-mock.git'
                   developerConnection 'scm:git@github.com:treelogic-swe/aws-mock.git'
               }
 
               licenses {
                   license {
                       name 'MIT'
                       distribution 'repo'
                   }
               }
 
               developers {
                   developer {
                        id 'christopherbalz'
                        name 'Christopher Balz'
                        email 'christopherbalz@yahoo.com'
                    }
                    developer {
                        id 'maxiaohao'
                        name 'Ma Xiaohao'
                        email 'maxiaohao@gmail.com'
                    }
                    developer {
                        id 'Jayscrivner'
                        name 'Jay Scrivner'
                        email 'Jayscrivner@gmail.com'
                    }
               }
            }
            
        }  
    }
}
